#!/usr/bin/env python3

import click
from rich.console import Console
from .commands.commands import (
    pods, logs, exec, pods_by_node, describe, delete,
    pod_metrics, all_metrics,
    init, use, login_aws, use_cluster, clusters,
    nodes, namespaces, urls, loadbalancer,
    pvs, pvcs, storage, node_metrics
)

console = Console()

class KubeContext:
    def __init__(self):
        self.namespace = None

pass_context = click.make_pass_decorator(KubeContext, ensure=True)

@click.group()
@click.version_option(version='1.0.0', prog_name='Jera CLI')
@click.pass_context
def cli(ctx):
    """üöÄ Jera CLI - Gerencie seus recursos na AWS e Kubernetes de maneira simples

    Uma CLI para facilitar opera√ß√µes comuns no cluster Kubernetes da Jera.
    
    Comandos Principais:
    
    ‚ö° Configura√ß√£o:
      init          Configura AWS SSO e kubectl para o cluster
      use           Define o namespace atual para opera√ß√µes
      use-cluster   Alterna entre diferentes clusters Kubernetes
      clusters      Lista todos os clusters configurados
      login-aws     Faz login no AWS SSO de forma interativa
    
    üìä Visualiza√ß√£o:
      pods         Lista todos os pods no namespace atual
      namespaces   Lista todos os namespaces dispon√≠veis com status
      pod-metrics  Mostra an√°lise detalhada de recursos dos pods
      all-metrics  Mostra an√°lise detalhada de recursos de todos os pods
      urls         Mostra as URLs dos Ingresses (todos os namespaces)
      loadbalancer Mostra as URLs dos LoadBalancers (todos os namespaces)
      lb           Alias para loadbalancer
    
    üíæ Armazenamento:
      pvs          Mostra os Persistent Volumes do cluster
      pvcs         Mostra os Persistent Volume Claims
      storage      Mostra uma vis√£o consolidada de armazenamento
    
    üñ•Ô∏è N√≥s:
      nodes        Lista todos os n√≥s do cluster
      describe     Mostra informa√ß√µes detalhadas de um n√≥ espec√≠fico
      node-metrics Mostra m√©tricas de utiliza√ß√£o dos n√≥s e top 5 pods
    
    üîç Opera√ß√µes em Pods:
      logs         Visualiza logs de um pod (com op√ß√£o de follow)
      exec         Abre um shell interativo dentro do pod
      delete       Deleta um ou mais pods no namespace atual
    
    Fluxo b√°sico de uso:
    
    1. Configure suas credenciais:
        $ jeracli login-aws    # Faz login no SSO
        $ jeracli init         # Configura o kubectl
    
    2. Selecione um namespace:
        $ jeracli use production
    
    3. Gerencie seus recursos:
        $ jeracli pods            # Lista pods
        $ jeracli pod-metrics     # V√™ m√©tricas dos pods
        $ jeracli logs            # V√™ logs (interativo)
        $ jeracli logs -a         # V√™ logs de todos os pods
        $ jeracli exec meu-pod    # Acessa o pod
        $ jeracli urls            # V√™ URLs dos Ingresses em todos os namespaces
        $ jeracli urls -n prod    # Filtra por namespace espec√≠fico
        $ jeracli lb              # V√™ URLs dos LoadBalancers
        $ jeracli pvcs            # V√™ Persistent Volume Claims
        $ jeracli node-metrics    # V√™ utiliza√ß√£o de recursos nos n√≥s
    
    Use --help em qualquer comando para mais informa√ß√µes:
        $ jeracli init --help
        $ jeracli pvs --help
        etc.
    """
    ctx.obj = KubeContext()

# Registra os comandos
cli.add_command(init)
cli.add_command(use)
cli.add_command(use_cluster)
cli.add_command(clusters)
cli.add_command(login_aws)
cli.add_command(pods)
cli.add_command(logs)
cli.add_command(exec)
cli.add_command(pod_metrics)
cli.add_command(all_metrics)
cli.add_command(nodes)
cli.add_command(pods_by_node)
cli.add_command(describe)
cli.add_command(namespaces)
cli.add_command(urls)
cli.add_command(delete)
cli.add_command(loadbalancer)
cli.add_command(pvs)
cli.add_command(pvcs)
cli.add_command(storage)
cli.add_command(node_metrics)

# Adiciona aliases
cli.add_command(login_aws, name='aws-login')
cli.add_command(loadbalancer, name='lb')

if __name__ == '__main__':
    cli() 